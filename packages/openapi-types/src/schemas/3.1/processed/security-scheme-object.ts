import { z } from 'zod'

const DescriptionSchema = z.object({
  /**
   * A description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description: z.string().optional(),
})

export const ApiKeyInValues = ['query', 'header', 'cookie'] as const

export const ApiKeySchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('apiKey'),
  /**
   * REQUIRED. The name of the header, query or cookie parameter to be used.
   *
   * TODO: Why do we use an empty string as the default?
   */
  name: z.string().optional().default(''),
  /**
   * REQUIRED. The location of the API key. Valid values are "query", "header", or "cookie".
   */
  in: z.enum(ApiKeyInValues).optional().default('header').catch('header'),
})

export const HttpSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('http'),
  /**
   * REQUIRED. The name of the HTTP Authentication scheme to be used in the Authorization header as defined in RFC7235.
   * The values used SHOULD be registered in the IANA Authentication Scheme registry. The value is case-insensitive,
   * as defined in RFC7235.
   */
  scheme: z
    .string()
    .toLowerCase()
    .pipe(z.enum(['basic', 'bearer']))
    .optional()
    .default('basic'),
  /**
   * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an
   * authorization server, so this information is primarily for documentation purposes.
   */
  bearerFormat: z.union([z.literal('JWT'), z.literal('bearer'), z.string()]).optional(),
})

export const OpenIdConnectSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('openIdConnect'),
  /**
   * REQUIRED. Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
   */
  openIdConnectUrl: z.string().optional().default(''),
})

/**
 * REQUIRED. The authorization URL to be used for this flow. This MUST be in
 * the form of a URL. The OAuth2 standard requires the use of TLS.
 */
const authorizationUrl = z.string().default('')

/**
 * REQUIRED. The token URL to be used for this flow. This MUST be in the
 * form of a URL. The OAuth2 standard requires the use of TLS.
 */
const tokenUrl = z.string().default('')

/**
 * OAuth Flow Object
 *
 * Configuration details for a supported OAuth Flow
 */
export const OAuthFlowObjectSchema = z.object({
  /**
   * The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires
   * the use of TLS.
   */
  refreshUrl: z.string().optional(),
  /**
   * REQUIRED. The available scopes for the OAuth2 security scheme. A map
   * between the scope name and a short description for it. The map MAY be empty.
   */
  'scopes': z.record(z.string(), z.string().optional()).optional().default({}).catch({}),
  /** Extension to save the client Id associated with an oauth flow */
  // TODO: Move somewhere else
  'x-scalar-client-id': z.string().optional(),
  // TODO: Move somewhere else
  /** The auth token */
  // 'token': z.string(),
})

/** Setup a default redirect uri if we can */
const defaultRedirectUri = typeof window !== 'undefined' ? window.location.origin + window.location.pathname : ''

/** Options for the x-usePkce extension */
export const XUsePkceValues = ['SHA-256', 'plain', 'no'] as const

/**
 * OAuth Flows Object
 *
 * Allows configuration of the supported OAuth Flows.
 *
 * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#oauth-flows-object
 */
export const OAuth2FlowObjectSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('oauth2'),
  /** REQUIRED. An object containing configuration information for the flow types supported. */
  flows: z
    .object({
      /**
       * Configuration for the OAuth Implicit flow
       */
      implicit: OAuthFlowObjectSchema.extend({
        type: z.literal('implicit').optional(),
        authorizationUrl,
        // 'x-scalar-redirect-uri': z.string().optional().default(defaultRedirectUri),
      }).optional(),
      /**
       * Configuration for the OAuth Resource Owner Password flow
       */
      password: OAuthFlowObjectSchema.extend({
        type: z.literal('password').optional(),
        tokenUrl,
        // TODO: Merge this somewhere else
        // clientSecret: z.string().default(''),
        username: z.string().default(''),
        password: z.string().default(''),
      }).optional(),
      /**
       * Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.
       */
      clientCredentials: OAuthFlowObjectSchema.extend({
        type: z.literal('clientCredentials').optional(),
        tokenUrl,
        // TODO: Merge this somewhere else
        // clientSecret: z.string().default(''),
      }).optional(),
      authorizationCode: OAuthFlowObjectSchema.extend({
        type: z.literal('authorizationCode').optional(),
        authorizationUrl,
        /**
         * Whether to use PKCE for the authorization code flow.
         *
         * TODO: add docs
         */
        // 'x-usePkce': z.enum(XUsePkceValues).optional().default('no'),
        // 'x-scalar-redirect-uri': z.string().optional().default(defaultRedirectUri),
        tokenUrl,
        // TODO: Merge this somewhere else
        // clientSecret: z.string().default(''),
      }).optional(),
    })
    .partial()
    // TODO: Did we just define this, or does this come from the specification?
    .default({
      implicit: { type: 'implicit', authorizationUrl: 'http://localhost:8080' },
    }),
})

export const MutualTlsSchema = DescriptionSchema.extend({
  /**
   * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2",
   * "openIdConnect".
   */
  type: z.literal('mutualTLS'),
})

/**
 * Security Scheme Object
 *
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query
 * parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials
 * and authorization code) as defined in RFC6749, and [[OpenID-Connect-Core]]. Please note that as of 2020, the implicit
 * flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use cases is
 * Authorization Code Grant flow with PKCE.
 *
 * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#security-scheme-object
 */
export const SecuritySchemeObjectSchema = z.union([
  ApiKeySchema,
  HttpSchema,
  MutualTlsSchema,
  OAuth2FlowObjectSchema,
  OpenIdConnectSchema,
])
